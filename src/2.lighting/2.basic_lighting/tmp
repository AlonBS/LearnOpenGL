
Implementation of the Phone model in View Space (opposed to Model Space - where viewPos 
is not (0,0,0). 
Key points:
We need to change the FragCoord, as well at the light position and the normal.
Note that only normalizing the normal is right - normalizing positions - is wrong. 





// VERTEX SHADER //



#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;


out vec3 Normal;
out vec3 FragPos;
out vec3 LightPos;

uniform vec3 lightPos;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    gl_Position = projection * view *  model * vec4(position, 1.0f);
    FragPos = vec3(view * model * vec4(position, 1.0f));
    Normal = normalize(mat3(transpose(inverse(view  * model))) * normal);
    LightPos = vec3(view * vec4(lightPos, 1.0f));
} 


// FRAGMENT SHADER //

#version 330 core
out vec4 color;

in vec3 FragPos;  
in vec3 Normal;
in vec3 LightPos;  
  
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
    //Ambient
    float ambientStrength = 0.1f;
	vec3 ambient = ambientStrength * lightColor;
  	
    // Diffuse 
	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Specular
    float specularStrength = 0.5f;
    vec3 viewDir = normalize( -FragPos );
  
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  
    
    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
} 

